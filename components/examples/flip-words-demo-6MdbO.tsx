\
You are given a task to integrate a React component into your codebase. Please verify your project has the following setup: - shadcn/ui project structure - Tailwind CSS v4.0 - TypeScript If any of these are missing, provide instructions on how to setup project via shadcn CLI, install Tailwind or Typescript. Determine the default path
for components and styles. If
default path
for components is not /components/ui, provide instructions
on
why
it
's important to create this folder Copy-paste this component to /components/ui folder: File location: components/flip-words-demo.tsx File content: import React from "react"; import { FlipWords } from "@/components/ui/flip-words"; export default function FlipWordsDemo() { const words = ["better", "cute", "beautiful", "modern"]; return ( <div className="h-[40rem] flex justify-center items-center px-4"> <div className="text-4xl mx-auto font-normal text-neutral-600 dark:text-neutral-400"> Build <FlipWords words={words} /> <br /> websites with Aceternity UI </div> </div> ); } File location: components/ui/flip-words.tsx File content: "use client"; import React, { useCallback, useEffect, useRef, useState } from "react"; import { AnimatePresence, motion, LayoutGroup } from "motion/react"; import { cn } from "@/lib/utils"; export const FlipWords = ({ words, duration = 3000, className, }: { words: string[]; duration?: number; className?: string; }) => { const [currentWord, setCurrentWord] = useState(words[0]); const [isAnimating, setIsAnimating] = useState<boolean>(false); // thanks for the fix Julian - https://github.com/Julian-AT const startAnimation = useCallback(() => { const word = words[words.indexOf(currentWord) + 1] || words[0]; setCurrentWord(word); setIsAnimating(true); }, [currentWord, words]); useEffect(() => { if (!isAnimating) setTimeout(() => { startAnimation(); }, duration); }, [isAnimating, duration, startAnimation]); return ( <AnimatePresence onExitComplete={() => { setIsAnimating(false); }} > <motion.div initial={{ opacity: 0, y: 10, }} animate={{ opacity: 1, y: 0, }} transition={{ type: "spring", stiffness: 100, damping: 10, }} exit={{ opacity: 0, y: -40, x: 40, filter: "blur(8px)", scale: 2, position: "absolute", }} className={cn( "z-10 inline-block relative text-left text-neutral-900 dark:text-neutral-100 px-2", className )} key={currentWord} > {/* edit suggested by Sajal: https://x.com/DewanganSajal */} {currentWord.split(" ").map((word, wordIndex) => ( <motion.span key={word + wordIndex} initial={{ opacity: 0, y: 10, filter: "blur(8px)" }} animate={{ opacity: 1, y: 0, filter: "blur(0px)" }} transition={{ delay: wordIndex * 0.3, duration: 0.3, }} className="inline-block whitespace-nowrap" > {word.split("").map((letter, letterIndex) => ( <motion.span key={word + letterIndex} initial={{ opacity: 0, y: 10, filter: "blur(8px)" }} animate={{ opacity: 1, y: 0, filter: "blur(0px)" }} transition={{ delay: wordIndex * 0.3 + letterIndex * 0.05, duration: 0.2, }} className="inline-block" > {letter} </motion.span> ))} <span className="inline-block">&nbsp;</span> </motion.span> ))} </motion.div> </AnimatePresence> ); };
